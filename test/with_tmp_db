#!/usr/bin/env bash
set -euo pipefail

usage() {
    cat << EOF

USAGE: $0 <command>

Runs the given command with the POSTGREST_TEST_CONNECTION environment variable
set to a temporary database that is ready for running the PostgREST test suite.

You'll need to have the Postgres binaries 'initdb' and 'pg_ctl' on your PATH.

Example:

    $0 stack test

EOF
    exit -1
}

if [ "$#" -lt 1 ]; then
    echo "Please provide a command to be run with the temporary database."
    usage
fi

rootdir="$(git rev-parse --show-toplevel)"

# All data will be stored in a temporary directory.
tmpdir="$(mktemp -d)"

trap "rm -rf tmpdir" exit

mkdir -p "$tmpdir"/{db,socket}

export PGDATA="$tmpdir/db"
export PGHOST="$tmpdir/socket"
export PGUSER=postgrest_test_authenticator
export PGDATABASE=postgres
export DB_URI="postgresql://$PGDATABASE?host=$PGHOST&user=$PGUSER"
export POSTGREST_TEST_CONNECTION="$DB_URI"

# Initialize a database cluster. We try to make it as independent as possible
# from the host by specifying the timezone, locale and encoding.
TZ=UTC initdb --no-locale --encoding=UTF8 \
  --nosync -U "$PGUSER" --auth=trust > "$tmpdir/initdb.log"

# Start the database cluster. Instead of listening on a local port, we will
# listen on a unix domain socket.
pg_ctl -l "$tmpdir/db.log" start -o "-F -c listen_addresses=\"\" -k $PGHOST"

# We need to wait for the cluster to be ready on older versions of
# Postgres (< 10)
until pg_isready > "$tmpdir/wait.log"; do
  sleep 0.1
done

stop() {
  pg_ctl stop -m i > "$tmpdir/stop.log"
  rm -rf "$tmpdir"
}

trap stop exit

# Prepare the database for running the tests.
psql -v ON_ERROR_STOP=1 > "$tmpdir/fixtures.log" << EOF
  create extension pgcrypto;
  alter database $PGDATABASE set request.jwt.claim.id = '-1';
  alter role $PGUSER set default_text_search_config to english;
EOF

loadfixture() {
  psql -q -v ON_ERROR_STOP=1 -f "$rootdir/test/fixtures/$1.sql" \
    > "$tmpdir/fixtures.log"
}

loadfixture database
loadfixture roles
loadfixture schema
loadfixture jwt
loadfixture jsonschema
loadfixture privileges

# Run the command that was given as an argument. The `exit` trap above will
# make sure that the database is shut down and the temporary directory is
# deleted when the command is done. This is also why we don't `exec` the
# command - our trap would be lost if we did that.
bash -c "$@"

@startuml

package "PostgREST" {
  () HTTP as HTTPAPI
  HTTPAPI  - [Auth]
  [Auth] -r.> [ApiRequest]
  [ApiRequest] -r.> [Plan]
  [Plan] -r.> [Query]
  [Query] - () "Connection Pool" : "\t"
  [Plan] -u-> [Schema Cache]:uses
  [Schema Cache] <- () Listener : reloads

  () HTTP as HTTPADMIN
  [Admin]  -r- () HTTPADMIN
  [Config] -l- () CLI

  [Config] <-l~ Listener

  HTTPADMIN -[hidden]r- CLI
  Listener -[hidden]r- [Schema Cache]
  Listener -[hidden]r- [Config]
  [Schema Cache] -l[hidden]- [Config]
  [Schema Cache] -l[hidden]- [Admin]
  [Schema Cache] -l[hidden]- CLI
}


database "PostgreSQL" {
  node "API schema" as API {
    rectangle "Functions, Views"
  }
  node Authorization {
    rectangle "Roles, GRANT, RLS"
  }
  rectangle "Tables, extensions" as tbs
  API -d- tbs

 API -[hidden]l- Authorization
}

:user:
hexagon Proxy
:user: .r-> Proxy
HTTPAPI <.l- Proxy

:operator: .d-> HTTPADMIN
:operator: .d-> CLI


PostgreSQL <.developer : "\t"
Listener -r.> "PostgreSQL"
"Connection Pool" -r.> "PostgreSQL" : "\t\t"


note bottom of Auth
  Authenticates the user request
end note

note bottom of ApiRequest
  Parses the URL syntax
end note

note bottom of Query
  Generates the SQL
end note

note top of Listener
  LISTEN session
end note
@enduml
